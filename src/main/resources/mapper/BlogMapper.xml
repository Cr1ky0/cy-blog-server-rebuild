<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.criiky0.mapper.BlogMapper">

    <sql id="select_dto">
        select CAST(blog_id as CHAR) as blogId, title, create_at as createAt, sort, menu_id as menuID
        from blog
    </sql>

    <sql id="query_map">
        <if test="queryMap != null">
            <foreach collection="queryMap" index="key" item="value">
                <if test="key != null and value != null">
                    and ${key} = #{value}
                </if>
            </foreach>
        </if>
    </sql>

    <resultMap id="BaseResultMap" type="com.criiky0.pojo.Blog">
        <id property="blogId" column="blog_id" jdbcType="BIGINT"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="likes" column="likes" jdbcType="INTEGER"/>
        <result property="views" column="views" jdbcType="INTEGER"/>
        <result property="createAt" column="create_at" jdbcType="TIMESTAMP"/>
        <result property="updateAt" column="update_at" jdbcType="TIMESTAMP"/>
        <result property="sort" column="sort" jdbcType="INTEGER"/>
        <result property="version" column="version" jdbcType="INTEGER"/>
        <result property="deleted" column="deleted" jdbcType="INTEGER"/>
        <result property="userId" column="user_id" jdbcType="BIGINT"/>
        <result property="menuId" column="menu_id" jdbcType="BIGINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        blog_id,title,content,
        likes,views,create_at,
        update_at,sort,version,
        deleted,user_id,menu_id
    </sql>

    <select id="findMaxSort" resultType="java.lang.Integer">
        select max(sort) as max_sort
        from blog
        where menu_id = #{menuId}
          and deleted = 0;
    </select>

    <update id="deleteAllOfMenu">
        update blog
        set deleted = 1
        where menu_id = #{menuId};
    </update>

    <select id="selectCollectedBlogDTO" resultType="blogDTO">
        <include refid="select_dto"/>
        where user_id = #{userId}
        and collected = true
        and deleted = 0;
    </select>

    <select id="selectTimeLine" resultType="blogDTO">
        <include refid="select_dto"/>
        where user_id = #{userId}
        and deleted = 0
        order by create_at desc;
    </select>

    <select id="getBlogDTOOfMenu" resultType="blogDTO">
        <include refid="select_dto"/>
        where menu_id = #{menuId}
        and deleted = 0
        order by sort asc;
    </select>

    <select id="selectPageOfUser" resultType="blog">
        select * from blog
        where user_id = #{userId} and deleted = 0
        <include refid="query_map"/>
        <choose>
            <when test="sort != null and sort == 'likes'">
                order by likes desc
            </when>
            <when test="sort != null and sort == 'views'">
                order by views desc
            </when>
            <otherwise>
                order by create_at desc
            </otherwise>
        </choose>
    </select>

    <select id="selectBlogHasCommentOfUser" resultType="map">
        SELECT CAST(b.blog_id as CHAR) as blogId,
               b.title,
               CAST(b.menu_id as CHAR) as menuId,
               CAST(b.user_id as CHAR) as userId,
               COUNT(c.comment_id)     AS commentCount
        FROM blog b
                 LEFT JOIN comment c ON b.blog_id = c.blog_id
        where c.deleted = 0
        GROUP BY b.blog_id, b.title
        HAVING commentCount > 0
    </select>
    <select id="countByUserWithOptions" resultType="long">
        select COUNT(*) as count
        from blog
        where user_id = #{userId} and deleted = 0
        <include refid="query_map"/>
    </select>
</mapper>
